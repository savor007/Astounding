# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import datastream_pb2 as datastream__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class DataStreamServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddSubscriber = channel.unary_unary(
                '/NationalInstruments.DataStream.DataStreamService/AddSubscriber',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=datastream__pb2.SubscriberToken.FromString,
                )
        self.RemoveSubscriber = channel.unary_unary(
                '/NationalInstruments.DataStream.DataStreamService/RemoveSubscriber',
                request_serializer=datastream__pb2.SubscriberToken.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.SubscribeTopic = channel.unary_unary(
                '/NationalInstruments.DataStream.DataStreamService/SubscribeTopic',
                request_serializer=datastream__pb2.TopicIdentifier.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.UnsubscribeTopic = channel.unary_unary(
                '/NationalInstruments.DataStream.DataStreamService/UnsubscribeTopic',
                request_serializer=datastream__pb2.TopicIdentifier.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.ReadLatestTopicMessage = channel.unary_unary(
                '/NationalInstruments.DataStream.DataStreamService/ReadLatestTopicMessage',
                request_serializer=datastream__pb2.TopicIdentifier.SerializeToString,
                response_deserializer=datastream__pb2.TopicData.FromString,
                )
        self.StartReadingTopicMessages = channel.unary_stream(
                '/NationalInstruments.DataStream.DataStreamService/StartReadingTopicMessages',
                request_serializer=datastream__pb2.SubscriberToken.SerializeToString,
                response_deserializer=datastream__pb2.TopicData.FromString,
                )
        self.StopReadingTopicMessages = channel.unary_unary(
                '/NationalInstruments.DataStream.DataStreamService/StopReadingTopicMessages',
                request_serializer=datastream__pb2.SubscriberToken.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.GetSubscribedTopics = channel.unary_unary(
                '/NationalInstruments.DataStream.DataStreamService/GetSubscribedTopics',
                request_serializer=datastream__pb2.SubscriberToken.SerializeToString,
                response_deserializer=datastream__pb2.TopicList.FromString,
                )
        self.GetAllSubscribedTopics = channel.unary_unary(
                '/NationalInstruments.DataStream.DataStreamService/GetAllSubscribedTopics',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=datastream__pb2.TopicList.FromString,
                )
        self.PublishMessage = channel.unary_unary(
                '/NationalInstruments.DataStream.DataStreamService/PublishMessage',
                request_serializer=datastream__pb2.TopicData.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class DataStreamServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddSubscriber(self, request, context):
        """Request the server to add a new subscriber.  Returns a unique token identifying the new subscriber.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveSubscriber(self, request, context):
        """Remove the subscriber from the server.  This will also unsubscribe any topics automatically.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeTopic(self, request, context):
        """Subscribe new messages for a given topic name.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnsubscribeTopic(self, request, context):
        """Unsubscribe new messages for a given topic name.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadLatestTopicMessage(self, request, context):
        """Read the latest message for a given topic.  This call does not continuously return new messages,
        use StartReadingTopicMessages for continuously streaming of new messages.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartReadingTopicMessages(self, request, context):
        """Stream any new messages from the subscribed topics.  The stream is long-lived and will keep open
        until StopReadingTopicMessages is called.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopReadingTopicMessages(self, request, context):
        """Stop reading for subscribed topic messages.  This call will close the opened stream from
        StartReadingTopicMessages.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSubscribedTopics(self, request, context):
        """Get all topics that are being subscribed by the subscriber.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllSubscribedTopics(self, request, context):
        """Get all the topics that are being subscribed, regardless of subscriber.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishMessage(self, request, context):
        """Publish a message to subscribers.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataStreamServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddSubscriber': grpc.unary_unary_rpc_method_handler(
                    servicer.AddSubscriber,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=datastream__pb2.SubscriberToken.SerializeToString,
            ),
            'RemoveSubscriber': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveSubscriber,
                    request_deserializer=datastream__pb2.SubscriberToken.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'SubscribeTopic': grpc.unary_unary_rpc_method_handler(
                    servicer.SubscribeTopic,
                    request_deserializer=datastream__pb2.TopicIdentifier.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'UnsubscribeTopic': grpc.unary_unary_rpc_method_handler(
                    servicer.UnsubscribeTopic,
                    request_deserializer=datastream__pb2.TopicIdentifier.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ReadLatestTopicMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadLatestTopicMessage,
                    request_deserializer=datastream__pb2.TopicIdentifier.FromString,
                    response_serializer=datastream__pb2.TopicData.SerializeToString,
            ),
            'StartReadingTopicMessages': grpc.unary_stream_rpc_method_handler(
                    servicer.StartReadingTopicMessages,
                    request_deserializer=datastream__pb2.SubscriberToken.FromString,
                    response_serializer=datastream__pb2.TopicData.SerializeToString,
            ),
            'StopReadingTopicMessages': grpc.unary_unary_rpc_method_handler(
                    servicer.StopReadingTopicMessages,
                    request_deserializer=datastream__pb2.SubscriberToken.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'GetSubscribedTopics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSubscribedTopics,
                    request_deserializer=datastream__pb2.SubscriberToken.FromString,
                    response_serializer=datastream__pb2.TopicList.SerializeToString,
            ),
            'GetAllSubscribedTopics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllSubscribedTopics,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=datastream__pb2.TopicList.SerializeToString,
            ),
            'PublishMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishMessage,
                    request_deserializer=datastream__pb2.TopicData.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'NationalInstruments.DataStream.DataStreamService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DataStreamService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddSubscriber(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NationalInstruments.DataStream.DataStreamService/AddSubscriber',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            datastream__pb2.SubscriberToken.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveSubscriber(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NationalInstruments.DataStream.DataStreamService/RemoveSubscriber',
            datastream__pb2.SubscriberToken.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeTopic(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NationalInstruments.DataStream.DataStreamService/SubscribeTopic',
            datastream__pb2.TopicIdentifier.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnsubscribeTopic(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NationalInstruments.DataStream.DataStreamService/UnsubscribeTopic',
            datastream__pb2.TopicIdentifier.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReadLatestTopicMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NationalInstruments.DataStream.DataStreamService/ReadLatestTopicMessage',
            datastream__pb2.TopicIdentifier.SerializeToString,
            datastream__pb2.TopicData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartReadingTopicMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/NationalInstruments.DataStream.DataStreamService/StartReadingTopicMessages',
            datastream__pb2.SubscriberToken.SerializeToString,
            datastream__pb2.TopicData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopReadingTopicMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NationalInstruments.DataStream.DataStreamService/StopReadingTopicMessages',
            datastream__pb2.SubscriberToken.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSubscribedTopics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NationalInstruments.DataStream.DataStreamService/GetSubscribedTopics',
            datastream__pb2.SubscriberToken.SerializeToString,
            datastream__pb2.TopicList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllSubscribedTopics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NationalInstruments.DataStream.DataStreamService/GetAllSubscribedTopics',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            datastream__pb2.TopicList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PublishMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NationalInstruments.DataStream.DataStreamService/PublishMessage',
            datastream__pb2.TopicData.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
